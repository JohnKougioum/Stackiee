// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                    @id @default(auto()) @map("_id") @db.ObjectId
  uid                         String                    @unique
  am                          String
  fullName                    String
  fullNameEL                  String
  email                       String
  eduPersonAffiliation        String
  eduPersonPrimaryAffiliation String
  regyear                     String
  posts                       Post[]
  Comment                     Comment[]
  messages                    Message[]
  conversations               ConversationParticipant[]
}

model Post {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  body           String
  normalizedBody String    @default("")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  semester       Int
  course         String
  User           User?     @relation(fields: [userId], references: [id])
  userId         String?   @db.ObjectId
  Comment        Comment[]
  File           File[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
}

model Conversation {
  id            String                    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  participants  ConversationParticipant[]
  messages      Message[]                 @relation("ConversationMessages")
  latestMessage String?
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  Message       Message[]
}

model ConversationParticipant {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  userId               String       @db.ObjectId
  user                 User         @relation(fields: [userId], references: [id])
  conversationId       String       @db.ObjectId
  conversation         Conversation @relation(fields: [conversationId], references: [id])
  isAdmin              Boolean
  hasSeenLatestMessage Boolean
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  senderId       String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id])
  body           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model File {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  encryptedDetails String?
  createdAt        DateTime @default(now())
  postId           String?  @db.ObjectId
  Post             Post?    @relation(fields: [postId], references: [id])
}
